{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mormad/Documents/sandogh/client/src/components/graph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Router, Route, Link } from 'react-router-dom';\nimport { PathLine } from 'react-svg-pathline';\nimport UnderStr from './underStrc';\nimport Section from './manager-sec';\nimport io from 'socket.io-client';\nimport host from '../constants/host';\nconst socket = io.connect(host, {\n  transports: ['websocket']\n});\nlet day = [];\nlet thisDay = new Date().getDate();\nlet thisM = parseInt(new Date().getMonth());\nlet grph = [];\nconsole.log(thisDay);\n\nfor (var i = 0; i < 30; i++) {\n  thisDay--; //thisDay = thisDay + 30;\n\n  grph.push({\n    x: thisDay,\n    y: 100\n  });\n}\n\nfor (var i = 1; i <= 30; i++) {\n  day.push({\n    x: i,\n    y: 100\n  });\n}\n\nconsole.log(grph);\n\nconst Graph = ({\n  activity\n}) => {\n  _s();\n\n  //console.log(activity);\n  const [data, setData] = useState();\n  const [g, setG] = useState(grph);\n  let c = 0;\n  let h = {};\n  let pLine = [];\n  useEffect(() => {\n    const sd = activity.map((item, i) => {\n      if (item != '') {\n        let d = item.split(' ')[0].split('/')[2];\n        let f = activity[i + 1];\n        h[d] = c + 1;\n\n        if (f) {\n          //console.log(item, activity[i+1]);\n          if (d != f.split(' ')[0].split('/')[2]) {\n            c = 0;\n          } else {\n            c++;\n          }\n        }\n\n        return h;\n      }\n    });\n    setData(sd[0]);\n  }, [1]);\n  useEffect(() => {\n    day.forEach((item, i) => {\n      if (data) {\n        //console.log(data);\n        let xX = 10 * item.x,\n            yY = 10 * item.y;\n\n        for (var j = 0; j < Object.keys(data).length; j++) {\n          if (xX == 10 * Object.keys(data)[j]) {\n            //console.log(100-Object.values(data)[j]);\n            pLine.push({\n              x: xX,\n              y: 1000 - Object.values(data)[j]\n            });\n          } else {\n            if (!pLine[i]) {\n              pLine.push({\n                x: xX,\n                y: yY\n              });\n            }\n          }\n        }\n      }\n    });\n\n    if (pLine != '') {\n      setG(pLine); //console.log(pLine);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"activityDiag\",\n      width: 210,\n      height: 70,\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n          id: \"gradient-303647730\",\n          x1: \"0\",\n          x2: \"0\",\n          y1: \"1\",\n          y2: \"0\",\n          children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"10%\",\n            stopColor: \"#BBDEFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"100%\",\n            stopColor: \"#00A1F1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PathLine, {\n        stroke: \"url(#gradient-303647730)\",\n        className: \"activityLine\",\n        points: g,\n        strokeWidth: \"3\",\n        fill: \"none\",\n        strokeLinecap: \"round\",\n        r: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Graph, \"qj05L0K5iZODiWgeaqGmRtHZMjk=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/mormad/Documents/sandogh/client/src/components/graph.js"],"names":["React","useState","useEffect","Router","Route","Link","PathLine","UnderStr","Section","io","host","socket","connect","transports","day","thisDay","Date","getDate","thisM","parseInt","getMonth","grph","console","log","i","push","x","y","Graph","activity","data","setData","g","setG","c","h","pLine","sd","map","item","d","split","f","forEach","xX","yY","j","Object","keys","length","values"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SACEC,MADF,EAEEC,KAFF,EAGEC,IAHF,QAIO,kBAJP;AAKA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACG,OAAH,CAAWF,IAAX,EAAgB;AAACG,EAAAA,UAAU,EAAE,CAAC,WAAD;AAAb,CAAhB,CAAf;AAEA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAd;AACA,IAAIC,KAAK,GAAGC,QAAQ,CAAC,IAAIH,IAAJ,GAAWI,QAAX,EAAD,CAApB;AACA,IAAIC,IAAI,GAAG,EAAX;AAEAC,OAAO,CAACC,GAAR,CAAYR,OAAZ;;AAEA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BT,EAAAA,OAAO,GADoB,CAE3B;;AACAM,EAAAA,IAAI,CAACI,IAAL,CAAU;AAACC,IAAAA,CAAC,EAACX,OAAH;AAAYY,IAAAA,CAAC,EAAC;AAAd,GAAV;AACD;;AAED,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BV,EAAAA,GAAG,CAACW,IAAJ,CAAS;AAACC,IAAAA,CAAC,EAACF,CAAH;AAAMG,IAAAA,CAAC,EAAC;AAAR,GAAT;AACD;;AAEDL,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAGA,MAAMO,KAAK,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAC5B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB9B,QAAQ,EAAhC;AACA,QAAM,CAAC+B,CAAD,EAAIC,IAAJ,IAAYhC,QAAQ,CAACoB,IAAD,CAA1B;AACA,MAAIa,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,EAAR;AACA,MAAIC,KAAK,GAAG,EAAZ;AAEAlC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmC,EAAE,GAAGR,QAAQ,CAACS,GAAT,CAAa,CAACC,IAAD,EAAOf,CAAP,KAAY;AAClC,UAAIe,IAAI,IAAI,EAAZ,EAAgB;AACd,YAAIC,CAAC,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBA,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAAR;AACA,YAAIC,CAAC,GAAGb,QAAQ,CAACL,CAAC,GAAC,CAAH,CAAhB;AACAW,QAAAA,CAAC,CAACK,CAAD,CAAD,GAAON,CAAC,GAAC,CAAT;;AACA,YAAIQ,CAAJ,EAAO;AACL;AACA,cAAIF,CAAC,IAAIE,CAAC,CAACD,KAAF,CAAQ,GAAR,EAAa,CAAb,EAAgBA,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,EAAwC;AACtCP,YAAAA,CAAC,GAAG,CAAJ;AACD,WAFD,MAEM;AACJA,YAAAA,CAAC;AACF;AACF;;AACD,eAAOC,CAAP;AACD;AACF,KAfU,CAAX;AAgBAJ,IAAAA,OAAO,CAACM,EAAE,CAAC,CAAD,CAAH,CAAP;AACD,GAlBQ,EAkBN,CAAC,CAAD,CAlBM,CAAT;AAsBAnC,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,GAAG,CAAC6B,OAAJ,CAAY,CAACJ,IAAD,EAAOf,CAAP,KAAa;AACvB,UAAIM,IAAJ,EAAU;AACR;AACA,YAAIc,EAAE,GAAG,KAAIL,IAAI,CAACb,CAAlB;AAAA,YAAsBmB,EAAE,GAAG,KAAIN,IAAI,CAACZ,CAApC;;AACA,aAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYlB,IAAZ,EAAkBmB,MAAtC,EAA8CH,CAAC,EAA/C,EAAmD;AACjD,cAAIF,EAAE,IAAI,KAAIG,MAAM,CAACC,IAAP,CAAYlB,IAAZ,EAAkBgB,CAAlB,CAAd,EAAqC;AACnC;AACAV,YAAAA,KAAK,CAACX,IAAN,CAAW;AAACC,cAAAA,CAAC,EAACkB,EAAH;AAAOjB,cAAAA,CAAC,EAAE,OAAKoB,MAAM,CAACG,MAAP,CAAcpB,IAAd,EAAoBgB,CAApB;AAAf,aAAX;AACD,WAHD,MAGM;AACJ,gBAAI,CAACV,KAAK,CAACZ,CAAD,CAAV,EAAe;AACbY,cAAAA,KAAK,CAACX,IAAN,CAAW;AAACC,gBAAAA,CAAC,EAACkB,EAAH;AAAOjB,gBAAAA,CAAC,EAACkB;AAAT,eAAX;AACD;AACF;AACF;AACF;AACF,KAfD;;AAgBA,QAAIT,KAAK,IAAI,EAAb,EAAiB;AACfH,MAAAA,IAAI,CAACG,KAAD,CAAJ,CADe,CAEf;AACD;AACF,GArBQ,EAqBN,CAACN,IAAD,CArBM,CAAT;AAuBA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,KAAK,EAAE,GAArC;AAA0C,MAAA,MAAM,EAAE,EAAlD;AAAA,8BACE;AAAA,+BACE;AAAgB,UAAA,EAAE,EAAC,oBAAnB;AAAwC,UAAA,EAAE,EAAC,GAA3C;AAA+C,UAAA,EAAE,EAAC,GAAlD;AAAsD,UAAA,EAAE,EAAC,GAAzD;AAA6D,UAAA,EAAE,EAAC,GAAhE;AAAA,kCACE;AAAM,YAAA,MAAM,EAAC,KAAb;AAAmB,YAAA,SAAS,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAM,YAAA,MAAM,EAAC,MAAb;AAAoB,YAAA,SAAS,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,QAAD;AACC,QAAA,MAAM,EAAC,0BADR;AAEC,QAAA,SAAS,EAAC,cAFX;AAGC,QAAA,MAAM,EAAEE,CAHT;AAIC,QAAA,WAAW,EAAC,GAJb;AAKC,QAAA,IAAI,EAAC,MALN;AAMC,QAAA,aAAa,EAAC,OANf;AAOC,QAAA,CAAC,EAAE;AAPJ;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAkBE;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA,kBADF;AAsBD,CA3ED;;GAAMJ,K;;KAAAA,K;AA4EN,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {\n  Router,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport {PathLine} from 'react-svg-pathline'\nimport UnderStr from './underStrc';\nimport Section from './manager-sec';\nimport io from 'socket.io-client';\nimport host from '../constants/host'\nconst socket = io.connect(host,{transports: ['websocket']});\n\nlet day = [];\nlet thisDay = new Date().getDate()\nlet thisM = parseInt(new Date().getMonth());\nlet grph = [];\n\nconsole.log(thisDay);\n\nfor (var i = 0; i < 30; i++) {\n  thisDay --;\n  //thisDay = thisDay + 30;\n  grph.push({x:thisDay, y:100})\n}\n\nfor (var i = 1; i <= 30; i++) {\n  day.push({x:i, y:100})\n}\n\nconsole.log(grph);\n\n\nconst Graph = ({activity}) => {\n  //console.log(activity);\n  const [data, setData] = useState()\n  const [g, setG] = useState(grph)\n  let c = 0;\n  let h = {};\n  let pLine = [];\n\n  useEffect(() => {\n    const sd = activity.map((item, i) =>{\n      if (item != '') {\n        let d = item.split(' ')[0].split('/')[2];\n        let f = activity[i+1];\n        h[d] = c+1;\n        if (f) {\n          //console.log(item, activity[i+1]);\n          if (d != f.split(' ')[0].split('/')[2]) {\n            c = 0;\n          }else {\n            c++\n          }\n        }\n        return h\n      }\n    });\n    setData(sd[0]);\n  }, [1])\n\n\n\n  useEffect(() => {\n    day.forEach((item, i) => {\n      if (data) {\n        //console.log(data);\n        let xX = 10*(item.x), yY = 10*(item.y);\n        for (var j = 0; j < Object.keys(data).length; j++) {\n          if (xX == 10*(Object.keys(data)[j])) {\n            //console.log(100-Object.values(data)[j]);\n            pLine.push({x:xX, y:(1000-Object.values(data)[j])})\n          }else {\n            if (!pLine[i]) {\n              pLine.push({x:xX, y:yY})\n            }\n          }\n        }\n      }\n    });\n    if (pLine != '') {\n      setG(pLine);\n      //console.log(pLine);\n    }\n  }, [data])\n\n  return (\n    <>\n      <svg className=\"activityDiag\" width={210} height={70}>\n        <defs>\n          <linearGradient id=\"gradient-303647730\" x1=\"0\" x2=\"0\" y1=\"1\" y2=\"0\">\n            <stop offset=\"10%\" stopColor=\"#BBDEFB\"></stop>\n            <stop offset=\"100%\" stopColor=\"#00A1F1\"></stop>\n        </linearGradient>\n        </defs>\n        <PathLine\n         stroke=\"url(#gradient-303647730)\"\n         className=\"activityLine\"\n         points={g}\n         strokeWidth=\"3\"\n         fill=\"none\"\n         strokeLinecap=\"round\"\n         r={0}\n         />\n      </svg>\n      <h1></h1>\n      </>\n  );\n}\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}