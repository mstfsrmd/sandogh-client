{"ast":null,"code":"\"use strict\";\n\nvar mkdirp = require(\"mkdirp\"),\n    fs = require(\"fs\"),\n    abs = require(\"abs\"),\n    typpy = require(\"typpy\"),\n    path = require(\"path\");\n/**\n * writeFileP\n * Create the directory structure and then create the file.\n *\n * @name writeFileP\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @param {Function} cb The callback function.\n */\n\n\nfunction writeFileP(outputPath, data, cb) {\n  outputPath = abs(outputPath);\n  var dirname = path.dirname(outputPath);\n  mkdirp(dirname, function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    var str = data;\n\n    if (typpy(data, Array) || typpy(data, Object)) {\n      str = JSON.stringify(data, null, 2);\n    }\n\n    fs.writeFile(outputPath, str, function (err) {\n      return cb(err, data);\n    });\n  });\n}\n/**\n * writeFileP.sync\n * The sync version of the function.\n *\n * @name writeFileP.sync\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @returns {String|Object} The content written in the file. If an object was provided, the stringified version will *not* be returned but the raw value.\n */\n\n\nwriteFileP.sync = function (outputPath, data) {\n  outputPath = abs(outputPath);\n  var dirname = path.dirname(outputPath);\n  mkdirp.sync(dirname);\n  var str = data;\n\n  if (typpy(data, Array) || typpy(data, Object)) {\n    str = JSON.stringify(data, null, 2);\n  }\n\n  fs.writeFileSync(outputPath, str);\n  return data;\n};\n\nmodule.exports = writeFileP;","map":{"version":3,"sources":["/home/mormad/Documents/sandogh/client/node_modules/write-file-p/lib/index.js"],"names":["mkdirp","require","fs","abs","typpy","path","writeFileP","outputPath","data","cb","dirname","err","str","Array","Object","JSON","stringify","writeFile","sync","writeFileSync","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAAA,IACIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CADhB;AAAA,IAEIE,GAAG,GAAGF,OAAO,CAAC,KAAD,CAFjB;AAAA,IAGIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAHnB;AAAA,IAIII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAJlB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,UAAT,CAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,EAAtC,EAA0C;AACtCF,EAAAA,UAAU,GAAGJ,GAAG,CAACI,UAAD,CAAhB;AACA,MAAIG,OAAO,GAAGL,IAAI,CAACK,OAAL,CAAaH,UAAb,CAAd;AACAP,EAAAA,MAAM,CAACU,OAAD,EAAU,UAAUC,GAAV,EAAe;AAC3B,QAAIA,GAAJ,EAAS;AACL,aAAOF,EAAE,CAACE,GAAD,CAAT;AACH;;AACD,QAAIC,GAAG,GAAGJ,IAAV;;AACA,QAAIJ,KAAK,CAACI,IAAD,EAAOK,KAAP,CAAL,IAAsBT,KAAK,CAACI,IAAD,EAAOM,MAAP,CAA/B,EAA+C;AAC3CF,MAAAA,GAAG,GAAGG,IAAI,CAACC,SAAL,CAAeR,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAN;AACH;;AACDN,IAAAA,EAAE,CAACe,SAAH,CAAaV,UAAb,EAAyBK,GAAzB,EAA8B,UAAUD,GAAV,EAAe;AACzC,aAAOF,EAAE,CAACE,GAAD,EAAMH,IAAN,CAAT;AACH,KAFD;AAGH,GAXK,CAAN;AAYH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,UAAU,CAACY,IAAX,GAAkB,UAAUX,UAAV,EAAsBC,IAAtB,EAA4B;AAC1CD,EAAAA,UAAU,GAAGJ,GAAG,CAACI,UAAD,CAAhB;AACA,MAAIG,OAAO,GAAGL,IAAI,CAACK,OAAL,CAAaH,UAAb,CAAd;AACAP,EAAAA,MAAM,CAACkB,IAAP,CAAYR,OAAZ;AACA,MAAIE,GAAG,GAAGJ,IAAV;;AACA,MAAIJ,KAAK,CAACI,IAAD,EAAOK,KAAP,CAAL,IAAsBT,KAAK,CAACI,IAAD,EAAOM,MAAP,CAA/B,EAA+C;AAC3CF,IAAAA,GAAG,GAAGG,IAAI,CAACC,SAAL,CAAeR,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAN;AACH;;AACDN,EAAAA,EAAE,CAACiB,aAAH,CAAiBZ,UAAjB,EAA6BK,GAA7B;AACA,SAAOJ,IAAP;AACH,CAVD;;AAYAY,MAAM,CAACC,OAAP,GAAiBf,UAAjB","sourcesContent":["\"use strict\";\n\nvar mkdirp = require(\"mkdirp\"),\n    fs = require(\"fs\"),\n    abs = require(\"abs\"),\n    typpy = require(\"typpy\"),\n    path = require(\"path\");\n\n/**\n * writeFileP\n * Create the directory structure and then create the file.\n *\n * @name writeFileP\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @param {Function} cb The callback function.\n */\nfunction writeFileP(outputPath, data, cb) {\n    outputPath = abs(outputPath);\n    var dirname = path.dirname(outputPath);\n    mkdirp(dirname, function (err) {\n        if (err) {\n            return cb(err);\n        }\n        var str = data;\n        if (typpy(data, Array) || typpy(data, Object)) {\n            str = JSON.stringify(data, null, 2);\n        }\n        fs.writeFile(outputPath, str, function (err) {\n            return cb(err, data);\n        });\n    });\n}\n\n/**\n * writeFileP.sync\n * The sync version of the function.\n *\n * @name writeFileP.sync\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @returns {String|Object} The content written in the file. If an object was provided, the stringified version will *not* be returned but the raw value.\n */\nwriteFileP.sync = function (outputPath, data) {\n    outputPath = abs(outputPath);\n    var dirname = path.dirname(outputPath);\n    mkdirp.sync(dirname);\n    var str = data;\n    if (typpy(data, Array) || typpy(data, Object)) {\n        str = JSON.stringify(data, null, 2);\n    }\n    fs.writeFileSync(outputPath, str);\n    return data;\n};\n\nmodule.exports = writeFileP;"]},"metadata":{},"sourceType":"script"}